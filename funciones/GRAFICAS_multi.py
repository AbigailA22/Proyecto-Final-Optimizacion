# -*- coding: utf-8 -*-
"""Hooke-Jeeves_actividad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a491avSVmscEBWf23zDIperl_0nf595G
"""

import math
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

"""## Función Rosenbrock

## $f(\vec{x}) = \sum_{i=1}^{n-1}[ 100(x_{i+i} - x_i^2)^2+(1-x_i)^2]$
"""

def rosenbrock(x: np.ndarray) -> float:
    return np.sum(100*(x[1:]-x[:-1]**2)**2 + (1-x[:-1])**2)
rosenbrock(np.array([1, 1]))

"""## Función Booth"""

def booth(x: np.ndarray) -> float:
    return (x[0] + 2*x[1] - 7)**2 + (2*x[0] + x[1] - 5)**2
#booth(np.array([1, 1])

"""## Funciones para hacer las gráficas en 3D y Contorno"""

def meshdata(x_min, x_max, y_min, y_max, function, n_puntos=200):
    # Crear una malla de puntos para x e y
    x_vals = np.linspace(x_min, x_max, n_puntos)
    y_vals = np.linspace(y_min, y_max, n_puntos)
    X, Y = np.meshgrid(x_vals, y_vals)

    # Evaluar la función en la malla
    Z = np.array([function(np.array([x, y])) for x, y in zip(np.ravel(X), np.ravel(Y))])
    Z = Z.reshape(X.shape)
    return X, Y, Z

def plot3d(X, Y, Z):
    # Crear la figura y los ejes 3D directamente
    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})

    # Gráfico 3D
    surface = ax.plot_surface(X, Y, Z, edgecolor='none', cmap='viridis')
    ax.set_title('Función en 3D')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('f(x, y)')

    plt.tight_layout()

    # Devolver fig y ax para poder modificar después
    return fig, ax

def plotContour(X, Y, Z):
    # Crear la figura y los ejes directamente
    fig, ax = plt.subplots()

    # Gráfico de contorno
    contour = ax.contourf(X, Y, Z, levels=10, cmap='viridis')
    fig.colorbar(contour, ax=ax)
    ax.set_title('Contornos de la función')
    ax.set_xlabel('x')
    ax.set_ylabel('y')

    plt.tight_layout()

    # Devolver fig y ax para poder añadir puntos después
    return fig, ax

"""
X, Y, Z = meshdata(-2, 2, -1, 3, rosenbrock)
plot3d(X, Y, Z)
plotContour(X, Y, Z)

X, Y, Z = meshdata(-10, 10, -10, 10, booth, n_puntos=200)
#plot3d(X, Y, Z)
plotContour(X, Y, Z)
"""


